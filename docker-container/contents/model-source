#!/usr/bin/env python -u

import argparse
import logging
import shlex
import sys
import os

from subprocess import Popen, PIPE
import json
import shlex


logging.basicConfig(stream=sys.stderr, level=logging.INFO,
                    format='%(levelname)s: %(name)s: %(message)s')
log = logging.getLogger('container-model-source')


def nodeCollectData(containerId, json, defaults, taglist):
    log.debug("Parsing json data for container: %s" % containerId)
    tags = ["docker"]
    tags.extend(taglist.split(","))
    data = {
        'nodename': containerId,
        'tags': ",".join(tags),
        'docker:Id': json[0]["Id"],
        'docker:Created': json[0]["Created"],
        'docker:Name': json[0]["Name"],
        'docker:Image': json[0]["Image"],
        'docker:State.Status': json[0]["State"]["Status"],
        'docker:State.Pid': json[0]["State"]["Pid"],
        'docker:State.StartedAt': json[0]["State"]["StartedAt"],
        'hostname': json[0]["Config"]["Hostname"],
        'docker:Config.Image': json[0]["Config"]["Image"],
        'docker:Config.Hostname': json[0]["Config"]["Hostname"],
        'docker:Config.Cmd': json[0]["Config"]["Cmd"][0],
        'docker:Config.Labels': json[0]["Config"]["Labels"],
        'docker:NetworkSettings.IPAddress': json[0]["NetworkSettings"]["IPAddress"],
    }
    data.update(dict(token.split('=') for token in shlex.split(defaults)))

    return data


if os.environ.get('RD_CONFIG_DEBUG') == 'true':
    log.setLevel(logging.DEBUG)
    log.debug("Log level configured for DEBUG")

parser = argparse.ArgumentParser(
    description='Execute a command string in the container.')
parser.add_argument('defaults', help='key=value list')
parser.add_argument('tags', help='comma separated list of additonal tags')
args = parser.parse_args()

if "RD_CONFIG_DOCKER_HOST" in os.environ:
    os.environ["DOCKER_HOST"] = os.environ["RD_CONFIG_DOCKER_HOST"]
    log.debug("DOCKER_HOST set to " + os.environ["RD_CONFIG_DOCKER_HOST"])
else:
    log.debug("RD_CONFIG_DOCKER_HOST environment variable not defined.")

if "RD_CONFIG_DOCKER_CERT_PATH" in os.environ:
    os.environ["DOCKER_CERT_PATH"] = os.environ["RD_CONFIG_DOCKER_CERT_PATH"]
    log.debug("DOCKER_CERT_PATH=" + os.environ["RD_CONFIG_DOCKER_CERT_PATH"])
    if "RD_CONFIG_DOCKER_TLS_VERIFY" in os.environ:
        os.environ["DOCKER_TLS_VERIFY"] = os.environ["RD_CONFIG_DOCKER_TLS_VERIFY"]
        log.debug("DOCKER_TLS_VERIFY=" + os.environ["RD_CONFIG_DOCKER_TLS_VERIFY"])
    else:
        log.debug("RD_CONFIG_DOCKER_TLS_VERIFY environment variable not defined.")

# Get a listing of the docker containers
log.debug("Executing `docker ps --format {{.ID}}` ...")
ps = Popen('docker ps --format "{{.ID}}"',
           shell=True, stdout=PIPE, stderr=PIPE,
           bufsize=1, universal_newlines=True)
exitcode = ps.wait()
if exitcode != 0:
    log.error("Failure from docker ps command (exitcode: %s)" % str(exitcode))
    sys.exit(1)


containers = ps.stdout.readlines()
log.debug('Processing %d containers ...' % len(containers))
node_set = []

for container in containers:
    log.debug('Inspecting container: %s' % container)
    inspect = Popen(shlex.split('docker inspect %s ' % container),
                    shell=False, stdout=PIPE, stderr=PIPE,
                    bufsize=1, universal_newlines=True)
    inspect_json = json.load(inspect.stdout)
    node_data = nodeCollectData(container.rstrip('\n'),
                                inspect_json,
                                args.defaults,
                                args.tags)
    node_set.append(node_data)


# done
print json.dumps(node_set, indent=4, sort_keys=True)
