#!/usr/bin/env python -u
import argparse
import logging
import shlex
import sys
import os
from subprocess import Popen, PIPE, STDOUT

if os.environ.get('RD_CONFIG_DEBUG') == 'true':
    log_level = 'DEBUG'
else:
    log_level = 'ERROR'

logging.basicConfig(
    stream=sys.stdout,
    level=getattr(logging, log_level),
    format='%(levelname)s: %(name)s: %(message)s'
)
log = logging.getLogger('docker-node-executor')

parser = argparse.ArgumentParser(
    description='Execute a command string in the container.'
)
parser.add_argument('container', help='the container ID')
parser.add_argument('command', help='the command string to execute')
args = parser.parse_args()

possible_opts = ['detach', 'env', 'interactive', 'privileged', 'tty', 'user']
OPTIONS = []

for opt in possible_opts:
    env_var_name = "RD_CONFIG_%s" % opt.upper().replace('-', '_')
    if env_var_name in os.environ:
        for env_var_value in shlex.split(os.environ[env_var_name]):
            OPTIONS.append("--%s='%s'" % (opt, env_var_value))
            log.debug("appended option: --%s='%s'" % (opt, env_var_value))

if 'RD_CONFIG_DOCKER_HOST' in os.environ:
    os.environ['DOCKER_HOST'] = os.environ['RD_CONFIG_DOCKER_HOST']

if 'RD_CONFIG_DOCKER_HOST' in os.environ:
    os.environ['DOCKER_HOST'] = os.environ['RD_CONFIG_DOCKER_HOST']
    log.debug('DOCKER_HOST set to %s' % os.environ['RD_CONFIG_DOCKER_HOST'])
else:
    log.debug('RD_CONFIG_DOCKER_HOST environment variable not defined.')

if 'RD_CONFIG_DOCKER_CERT_PATH' in os.environ:
    os.environ['DOCKER_CERT_PATH'] = os.environ['RD_CONFIG_DOCKER_CERT_PATH']
    log.debug('DOCKER_CERT_PATH=%s' % os.environ['RD_CONFIG_DOCKER_CERT_PATH'])
else:
    log.debug('RD_CONFIG_DOCKER_CERT_PATH environment variable not defined.')

if 'RD_CONFIG_DOCKER_TLS_VERIFY' in os.environ:
    os.environ['DOCKER_TLS_VERIFY'] = os.environ['RD_CONFIG_DOCKER_TLS_VERIFY']
    log.debug(
        'DOCKER_TLS_VERIFY=%s' % os.environ['RD_CONFIG_DOCKER_TLS_VERIFY']
    )
else:
    log.debug(
        'RD_CONFIG_DOCKER_TLS_VERIFY environment variable not defined.'
    )

command_string = "docker exec %s %s sh -c '%s'" % (' '.join(OPTIONS), args.container, args.command)

log.debug("Executing: '%s' ..." % command_string)

p = Popen(
    shlex.split(command_string),
    shell=False,
    stdout=PIPE,
    stderr=STDOUT
)

# Print lines to stdout while waiting for command to finish
while True:
    line = p.stdout.readline().rstrip()
    if line:
        print line
    if p.poll() is not None:
        break

exitcode = p.poll()

if exitcode != 0:
    log.error('Command execution failed with exit code: %s' % str(exitcode))

# done
sys.exit(exitcode)
