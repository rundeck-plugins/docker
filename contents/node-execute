#!/usr/bin/env python
import argparse
import logging
import shlex
import sys
import os
from subprocess import Popen, PIPE, STDOUT

os.environ['PYTHONUNBUFFERED'] = '1'

if os.environ.get('RD_CONFIG_DEBUG') == 'true':
    log_level = 'DEBUG'
else:
    log_level = 'ERROR'

logging.basicConfig(
    stream=sys.stdout,
    level=getattr(logging, log_level),
    format='%(levelname)s: %(name)s: %(message)s'
)
log = logging.getLogger('docker-node-executor')

parser = argparse.ArgumentParser(
    description='Execute a command string in the container.'
)
parser.add_argument('container', help='the container ID')
parser.add_argument('user', help='the user ID')
#parser.add_argument('command', help='the command string to execute')
args = parser.parse_args()

if 'RD_CONFIG_DOCKER_HOST' in os.environ:
    os.environ['DOCKER_HOST'] = os.environ['RD_CONFIG_DOCKER_HOST']
    log.debug('DOCKER_HOST set to %s' % os.environ['RD_CONFIG_DOCKER_HOST'])
else:
    log.debug('RD_CONFIG_DOCKER_HOST environment variable not defined.')

if 'RD_CONFIG_DOCKER_CERT_PATH' in os.environ:
    os.environ['DOCKER_CERT_PATH'] = os.environ['RD_CONFIG_DOCKER_CERT_PATH']
    log.debug('DOCKER_CERT_PATH=%s' % os.environ['RD_CONFIG_DOCKER_CERT_PATH'])
else:
    log.debug('RD_CONFIG_DOCKER_CERT_PATH environment variable not defined.')

if 'RD_CONFIG_DOCKER_TLS_VERIFY' in os.environ:
    os.environ['DOCKER_TLS_VERIFY'] = os.environ['RD_CONFIG_DOCKER_TLS_VERIFY']
    log.debug(
        'DOCKER_TLS_VERIFY=%s' % os.environ['RD_CONFIG_DOCKER_TLS_VERIFY']
    )
else:
    log.debug(
        'RD_CONFIG_DOCKER_TLS_VERIFY environment variable not defined.'
    )

shell = None
if 'RD_CONFIG_SHELL' in os.environ:
    shell = os.environ['RD_CONFIG_SHELL']

command = None

if 'RD_EXEC_COMMAND' in os.environ:
    command = os.environ['RD_EXEC_COMMAND']
else:
    command = os.environ['RD_CONFIG_COMMAND']

if command is None:
    log.error('Command was not set')
    sys.exit(1)


log.debug(
    "Executing command string '%s' in container '%s'"
    "..." % (command, args.container)
)

ps_command=["docker","exec"]

if args.user:
    ps_command.append("--user")
    ps_command.append(args.user)

ps_command.append(args.container)
if shell:
    ps_command.append(shell + " -c \" " + command + " \" ")
else:
    ps_command.append(command)

log.debug(
    "Executing command string '%s' "
    "..." % (' '.join(ps_command))
)

p = Popen(
    ' '.join(ps_command),
    stdout=PIPE,
    stderr=STDOUT,
    shell=True
)

# Print lines to stdout while waiting for command to finish
while True:
    line = p.stdout.readline().rstrip()
    if line:
        print(line)
    if p.poll() is not None:
        break

exitcode = p.poll()

if exitcode != 0:
    log.error('Command execution failed with exit code: %s' % str(exitcode))

# done
sys.exit(exitcode)

