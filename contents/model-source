#!/usr/bin/env python -u
import argparse
import logging
import shlex
import sys
import os
import json
import re
from subprocess import Popen, PIPE

if os.environ.get('RD_CONFIG_DEBUG') == 'true':
    log_level = 'DEBUG'
else:
    log_level = 'ERROR'

logging.basicConfig(
    stream=sys.stderr,
    level=getattr(logging, log_level),
    format='%(levelname)s: %(name)s: %(message)s'
)
log = logging.getLogger('container-model-source')

class JsonQuery(dict):
    def get(self, path, default = None):
        keys = path.split(".")
        val = None

        for key in keys:
            if val:
                if isinstance(val, list):
                    val = [ v.get(key, default) if v else None for v in val]
                else:
                    val = val.get(key, default)
            else:
                val = dict.get(self, key, default)

            if not val:
                break;

        return val


def getMapping(mappingList, default_settings, json):
    mappings = []
    custom_attributes = {}
    log.debug('Mapping: %s' % mappingList)

    if "\n" in mappingList:
        mappings.extend(mappingList.split('\n\t *'))
    else:
        mappings.extend(mappingList.split(','))

    for mapping in mappings:
        mapping_array = dict(s.split('=', 1) for s in mapping.split())
        log.debug('mapping_array: %s' % mapping_array)

        for key, value in mapping_array.items():

            log.debug("key: %s, value: %s" % (key, value))
            if ".selector" in key:
                log.debug("checking selector %s %s" % (key, value))
                attribute = key.replace(".selector", "")
                custom_attribute = None

                # take the values from default
                if "docker:" in value:
                    custom_attribute = default_settings[value]
                else:
                    # taking the values from docker inspect
                    for item in json:
                        custom_attribute = JsonQuery(item).get(value)

                if custom_attribute:
                    custom_attributes[attribute] = custom_attribute

            if ".default" in key:
                log.debug("checking defaults %s %s" % (key, value))

                match = re.match("^([^.]+?)\.([^.]+?)\.default", key)

                attribute = None
                filter = None

                if match is not None:
                    log.debug(" number match: %s" % len(match.groups()))

                    log.debug(" group1: %s" % match.group(1))
                    log.debug(" group2: %s" % match.group(2))

                    attribute = match.group(1)
                    filter = match.group(2)

                match = re.match("^([^.]+?)\.default", key)

                if match is not None:
                    log.debug(" number match: %s" % len(match.groups()))
                    log.debug(" group1: %s" % match.group(1))

                    attribute = match.group(1)

                if filter is None:

                    if attribute not in custom_attributes:
                        custom_attributes[attribute] = value
                else:
                    # dataFilter = JsonQuery(item).get(filter)
                    if filter in default_settings.values():
                        custom_attributes[attribute] = value
                        log.debug("     dataFilter: %s, value: %s" % (filter, value))

    return custom_attributes


def nodeCollectData(containerId, json, defaults, taglist, mappingList):
    log.debug('Parsing json data for container: %s' % containerId)

    ip=json[0]["NetworkSettings"]["IPAddress"]

    #docker-compose has a different json format
    if not ip:
        networkArray=json[0]["NetworkSettings"]["Networks"]
        for key, value in networkArray.items():
            ip=value["IPAddress"]

    default_settings = {
        'docker:Id': json[0]["Id"],
        'docker:Created': json[0]["Created"],
        'docker:Name': json[0]["Name"],
        'docker:Image': json[0]["Image"],
        'docker:State.Status': json[0]["State"]["Status"],
        'docker:State.Pid': json[0]["State"]["Pid"],
        'docker:State.StartedAt': json[0]["State"]["StartedAt"],
        'docker:Config.Image': json[0]["Config"]["Image"],
        'docker:Config.Hostname': json[0]["Config"]["Hostname"],
        'docker:Config.Labels': json[0]["Config"]["Labels"],
        'docker:IPAddress': ip
    }

    if(json[0]["Config"]["Cmd"]):
        default_settings['docker:Config.Cmd']=json[0]["Config"]["Cmd"][0]

    # rundeck attributes
    data = default_settings
    data['nodename'] = containerId
    data['hostname'] = json[0]["Config"]["Hostname"]

    tags = []

    if "," in taglist:
        tags.extend(taglist.split(','))
    else:
        tags.extend(taglist.split(' '))

    final_tags = ['docker']
    for tag in tags:
        if "tag.selector=" in tag:
            custom_tag = data[tag.replace("tag.selector=", "")]
            final_tags.append(custom_tag)
        else:
            final_tags.append(tag)

    data['tags'] = ','.join(final_tags)

    #custom mapping attributes
    if mappingList:
        custom_attributes = getMapping(mappingList, default_settings, json)

        log.debug('Custom Attributes: %s' % custom_attributes)

        if custom_attributes:
            data = dict(data.items() + custom_attributes.items())

    if defaults:
        data.update(dict(token.split('=') for token in shlex.split(defaults)))

    return data


parser = argparse.ArgumentParser(
    description='Execute a command string in the container.'
)

parser.add_argument('defaults', help='key=value list')
parser.add_argument('tags', help='comma separated list of additonal tags')

args = parser.parse_args()

if 'RD_CONFIG_DOCKER_HOST' in os.environ:
    os.environ['DOCKER_HOST'] = os.environ['RD_CONFIG_DOCKER_HOST']
    log.debug('DOCKER_HOST set to %s' % os.environ['RD_CONFIG_DOCKER_HOST'])
else:
    log.debug('RD_CONFIG_DOCKER_HOST environment variable not defined.')

if 'RD_CONFIG_DOCKER_CERT_PATH' in os.environ:
    os.environ['DOCKER_CERT_PATH'] = os.environ['RD_CONFIG_DOCKER_CERT_PATH']
    log.debug('DOCKER_CERT_PATH=%s' % os.environ['RD_CONFIG_DOCKER_CERT_PATH'])
else:
    log.debug('RD_CONFIG_DOCKER_CERT_PATH environment variable not defined.')

if 'RD_CONFIG_DOCKER_TLS_VERIFY' in os.environ:
    os.environ['DOCKER_TLS_VERIFY'] = os.environ['RD_CONFIG_DOCKER_TLS_VERIFY']
    log.debug(
        'DOCKER_TLS_VERIFY=%s' % os.environ['RD_CONFIG_DOCKER_TLS_VERIFY']
    )
else:
    log.debug(
        'RD_CONFIG_DOCKER_TLS_VERIFY environment variable not defined.'
    )

mappingList = None
filter = None
defaults = None

if 'RD_CONFIG_MAPPING' in os.environ:
    mappingList = os.environ['RD_CONFIG_MAPPING']

if 'RD_CONFIG_FILTER' in os.environ:
    filter = os.environ['RD_CONFIG_FILTER']

if 'RD_CONFIG_ATTRIBUTES' in os.environ:
    defaults = os.environ['RD_CONFIG_ATTRIBUTES']

log.debug('Mapping: %s' % mappingList)

# Get a listing of the docker containers

ps_command=["docker","ps","--format",'"{{.ID}}"']

if filter:
    for value in filter.split(","):
        ps_command.append("--filter")
        ps_command.append(value)

log.debug('Executing `%s` ...' % ' '.join(ps_command))


ps = Popen(
    ' '.join(ps_command),
    shell=True,
    stdout=PIPE,
    stderr=PIPE,
    bufsize=1,
    universal_newlines=True
)
exitcode = ps.wait()

if exitcode != 0:
    log.error('Failure from docker ps command (exitcode: %s)' % str(exitcode))
    sys.exit(exitcode)

containers = ps.stdout.readlines()
log.debug('Processing %d containers ...' % len(containers))
node_set = []

for container in containers:
    log.debug('Inspecting container: %s' % container)
    inspect = Popen(
        shlex.split('docker inspect %s ' % container),
        shell=False,
        stdout=PIPE,
        stderr=PIPE,
        bufsize=1,
        universal_newlines=True
    )
    inspect_json = json.load(inspect.stdout)
    node_data = nodeCollectData(
        container.rstrip('\n'),
        inspect_json,
        defaults,
        args.tags,
        mappingList
    )
    node_set.append(node_data)

# done
print(json.dumps(node_set, indent=4, sort_keys=True))
