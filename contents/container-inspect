#!/usr/bin/env python -u
import argparse
import logging
import shlex
import sys
import os
from subprocess import Popen, PIPE, STDOUT

if os.environ.get('RD_CONFIG_DEBUG') == 'true':
    log_level = 'DEBUG'
else:
    log_level = 'ERROR'

logging.basicConfig(
    stream=sys.stdout,
    level=getattr(logging, log_level),
    format='%(levelname)s: %(name)s: %(message)s'
)
log = logging.getLogger('docker-inspect')

parser = argparse.ArgumentParser(
    description='Run the inspect command for the container.'
)
parser.add_argument('container', help='the container ID')
args = parser.parse_args()

if 'RD_CONFIG_DOCKER_HOST' in os.environ:
    os.environ['DOCKER_HOST'] = os.environ['RD_CONFIG_DOCKER_HOST']
    log.debug('DOCKER_HOST set to %s' % os.environ['RD_CONFIG_DOCKER_HOST'])
else:
    log.debug('RD_CONFIG_DOCKER_HOST environment variable not defined.')

if 'RD_CONFIG_DOCKER_CERT_PATH' in os.environ:
    os.environ['DOCKER_CERT_PATH'] = os.environ['RD_CONFIG_DOCKER_CERT_PATH']
    log.debug('DOCKER_CERT_PATH=%s' % os.environ['RD_CONFIG_DOCKER_CERT_PATH'])
else:
    log.debug('RD_CONFIG_DOCKER_CERT_PATH environment variable not defined.')

if 'RD_CONFIG_DOCKER_TLS_VERIFY' in os.environ:
    os.environ['DOCKER_TLS_VERIFY'] = os.environ['RD_CONFIG_DOCKER_TLS_VERIFY']
    log.debug(
        'DOCKER_TLS_VERIFY=%s' % os.environ['RD_CONFIG_DOCKER_TLS_VERIFY']
    )
else:
    log.debug(
        'RD_CONFIG_DOCKER_TLS_VERIFY environment variable not defined.'
    )

p = Popen(
    shlex.split('docker inspect %s' % (args.container)),
    shell=False,
    stdout=PIPE,
    stderr=STDOUT
)
exitcode = p.wait()

if log_level == 'DEBUG':
    log.debug("Command execution stdout: '%s' ..." % p.stdout.read())
    log.debug("Command execution stderr: '%s' ..." % p.stderr.read())
else:
    print(p.stdout.read())

if exitcode != 0:
    log.error('Command execution failed with exit code: %s' % str(exitcode))

# done
sys.exit(exitcode)
